/*
 * Mailer service API
 * Mailer service for microservices architecture for sending emails.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: andrzej.przybysz01@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.lazydev.stksongbook.mailer.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;

/**
 * EmailDsn
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-08-25T00:05:28.841+02:00")
public class EmailDsn {
  @JsonProperty("id")
  private String id = null;

  /**
   * Gets or Sets notify
   */
  public enum NotifyEnum {
    SUCCESS("success"),
    
    FAILURE("failure"),
    
    DELAY("delay"),
    
    NEVER("never");

    private String value;

    NotifyEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static NotifyEnum fromValue(String text) {
      for (NotifyEnum b : NotifyEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("notify")
  private List<NotifyEnum> notify = null;

  @JsonProperty("recipient")
  private String recipient = null;

  public EmailDsn id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @ApiModelProperty(value = "")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public EmailDsn notify(List<NotifyEnum> notify) {
    this.notify = notify;
    return this;
  }

  public EmailDsn addNotifyItem(NotifyEnum notifyItem) {
    if (this.notify == null) {
      this.notify = new ArrayList<NotifyEnum>();
    }
    this.notify.add(notifyItem);
    return this;
  }

   /**
   * Get notify
   * @return notify
  **/
  @ApiModelProperty(value = "")
  public List<NotifyEnum> getNotify() {
    return notify;
  }

  public void setNotify(List<NotifyEnum> notify) {
    this.notify = notify;
  }

  public EmailDsn recipient(String recipient) {
    this.recipient = recipient;
    return this;
  }

   /**
   * Get recipient
   * @return recipient
  **/
  @ApiModelProperty(value = "")
  public String getRecipient() {
    return recipient;
  }

  public void setRecipient(String recipient) {
    this.recipient = recipient;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EmailDsn emailDsn = (EmailDsn) o;
    return Objects.equals(this.id, emailDsn.id) &&
        Objects.equals(this.notify, emailDsn.notify) &&
        Objects.equals(this.recipient, emailDsn.recipient);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, notify, recipient);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EmailDsn {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    notify: ").append(toIndentedString(notify)).append("\n");
    sb.append("    recipient: ").append(toIndentedString(recipient)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

